<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter 5 | ロボットシステム入門</title><link>https://matsuolab.github.io/roomba_hack_course/course/chap5/</link><atom:link href="https://matsuolab.github.io/roomba_hack_course/course/chap5/index.xml" rel="self" type="application/rss+xml"/><description>Chapter 5</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja</language><copyright>© 2024 Tokyo Robot And Intelligence Lab (TRAIL)</copyright><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate><image><url>https://matsuolab.github.io/roomba_hack_course/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url><title>Chapter 5</title><link>https://matsuolab.github.io/roomba_hack_course/course/chap5/</link></image><item><title>三次元画像処理</title><link>https://matsuolab.github.io/roomba_hack_course/course/chap5/three-dimensions/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://matsuolab.github.io/roomba_hack_course/course/chap5/three-dimensions/</guid><description>&lt;h2 id="learn">Learn&lt;/h2>
&lt;!--今回はRealSenseD435というRGBDカメラを用いて三次元画像処理を行っていきましょう。-->
&lt;p>RGBDカメラを用いて三次元画像処理を行いましょう。&lt;/p>
&lt;h3 id="rgbdカメラについて">RGBDカメラについて&lt;/h3>
&lt;p>RGBDカメラとは、色(RGB)に加え、深度(Depth)情報を取得できるカメラのことです。
周りの環境を三次元の空間として認識することで、ロボットはより複雑にふるまうことができます。
比較的安価でよく利用されるRGBDカメラとして、Intel社製のRealSenseやMicrosoft社製のXtion(エクシオン)などがあります。&lt;/p>
&lt;h3 id="realsense">RealSense&lt;/h3>
&lt;p>今回はRGBDカメラとしてRealSenseD435を使用します。&lt;/p>
&lt;p>ROSで用いる際には&lt;a href="https://github.com/IntelRealSense/realsense-ros" target="_blank" rel="noopener">標準のラッパー&lt;/a>を使用します。&lt;/p>
&lt;pre>&lt;code>roslaunch realsense2_camera rs_camera.launch
&lt;/code>&lt;/pre>
&lt;p>を実行すると、2種類のトピック&lt;/p>
&lt;p>&lt;code>/camera/color/image_raw&lt;/code> (RGB画像)&lt;br>
&lt;code>/camera/depth/image_raw&lt;/code> (デプス画像)&lt;/p>
&lt;p>が利用できるようになります。&lt;br>
これらのトピックはいずれも&lt;code>sensor_msgs/Image&lt;/code>型です。&lt;/p>
&lt;p>RealSenseはRGB画像モジュールとデプス画像モジュールが物理的に離れています。
このため、これら2つのトピックはいずれも画像データではあるものの、ピクセルの位置関係が対応しておらず、そのまま画像処理に利用することはできません。&lt;/p>
&lt;p>RealSenseを使用するためのlaunchファイル(&lt;a href="">rs_camera.launch&lt;/a>)を起動する際に
&amp;ldquo;align_depth&amp;quot;パラメータを&amp;quot;true&amp;quot;に指定することで、デプス画像をRGB画像のピクセルに対応するように変換した
&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>トピックが使用できるようになります。&lt;/p>
&lt;p>ただし、roomba_bringupパッケージのbringup.launchファイルの&lt;/p>
&lt;pre>&lt;code> &amp;lt;include file=&amp;quot;$(find realsense2_camera)/launch/rs_camera.launch&amp;quot; if=&amp;quot;$(arg realsense)&amp;quot;&amp;gt;
&amp;lt;arg name=&amp;quot;align_depth&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;/include&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>の箇所がこの操作に対応していため、今回は特別な操作をせずとも
&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>トピックを使用できます。&lt;/p>
&lt;h3 id="物体検出">物体検出&lt;/h3>
&lt;p>まずは3次元情報を扱わず、RGB画像&lt;code>/camera/color/image_raw&lt;/code>のみを用いて画像検出を行ってみましょう。&lt;/p>
&lt;p>以下は、
&lt;a href="https://github.com/matsuolab/roomba_hack/tree/master/catkin_ws/src/three-dimensions_tutorial" target="_blank" rel="noopener">three-dementions_tutorial&lt;/a>パッケージの
&lt;a href="https://github.com/matsuolab/roomba_hack/blob/master/catkin_ws/src/three-dimensions_tutorial/scripts/object_detection.py" target="_blank" rel="noopener">object_detection.py&lt;/a>
です。&lt;/p>
&lt;ol>
&lt;li>&lt;code>/camera/color/image_raw&lt;/code>をsubscribeし、&lt;/li>
&lt;li>物体検出アルゴリズムであるYOLOv8に入力し、&lt;/li>
&lt;li>物体検出の結果をbounding boxとして描画し、&lt;/li>
&lt;li>&lt;code>/detection_result&lt;/code>としてpublish&lt;/li>
&lt;/ol>
&lt;p>の処理を行っています。&lt;/p>
&lt;pre>&lt;code class="language-py">#!/usr/bin/env python3
import copy
from typing import List
import cv2
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from ultralytics import YOLO
from ultralytics.engine.results import Results
class ObjectDetection:
def __init__(self):
rospy.init_node('object_detection', anonymous=True)
# Publisher
self.detection_result_pub = rospy.Publisher('/detection_result', Image, queue_size=10)
# Subscriber
rospy.Subscriber('/camera/color/image_raw', Image, self.callback_rgb)
self.bridge = CvBridge()
self.rgb_image = None
self.model = YOLO('yolov8n.pt')
def callback_rgb(self, data):
cv_array = self.bridge.imgmsg_to_cv2(data, 'bgr8')
self.rgb_image = cv_array
def process(self):
while not rospy.is_shutdown():
if self.rgb_image is None:
continue
results: List[Results] = self.model.predict(self.rgb_image)
# plot bounding box
tmp_image = copy.deepcopy(self.rgb_image)
for result in results:
boxes = result.boxes.cpu().numpy()
names = result.names
for xyxy, conf, cls in zip(boxes.xyxy, boxes.conf, boxes.cls):
if conf &amp;lt; 0.5:
continue
x1, y1, x2, y2 = map(int, xyxy[:4])
cls_pred = cls
tmp_image = cv2.rectangle(tmp_image, (x1, y1), (x2, y2), (0, 255, 0), 3)
tmp_image = cv2.putText(tmp_image, names[cls_pred], (x1, y1), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0), 2)
# publish image
detection_result = self.bridge.cv2_to_imgmsg(tmp_image, &amp;quot;bgr8&amp;quot;)
self.detection_result_pub.publish(detection_result)
if __name__ == '__main__':
od = ObjectDetection()
try:
od.process()
except rospy.ROSInitException:
pass
&lt;/code>&lt;/pre>
&lt;p>画像データを物体検出モデルに入力として渡すためには、その画像データの型がnp.ndarray型である必要があります。
そのため、コールバック関数で、受け取った&lt;code>sensor_msgs/Image&lt;/code>型の画像データをnp.ndarray型に変換しています。&lt;/p>
&lt;pre>&lt;code class="language-py">cv_array = self.bridge.imgmsg_to_cv2(data, 'bgr8')
&lt;/code>&lt;/pre>
&lt;p>の部分がこの処理に対応します。&lt;br>
subscriberを宣言するときにコールバック関数を指定して、
subscribeしたデータをこの関数に渡すという基本的な処理の流れは、
&lt;code>scan&lt;/code>など他のトピックを扱うsubscriberと同じです。&lt;/p>
&lt;p>ここで、YOLOの推論部分をコールバック関数内で行っていないことに注意しましょう。
一見、新しいデータが入ってくるときのみに推論を回すことは合理的に見えますが、
センサの入力に対してコールバック関数内の処理が重いと処理するデータが最新のものからどんどん遅れてしまいます。
コールバック関数はセンサデータの最低限の処理にとどめ、重い処理は分けて書くことを意識しましょう。&lt;/p>
&lt;p>また、ここでは既存の物体検出モジュールを使用しましたが、PyTorchなどで自作したモデルも同様の枠組みで利用することができます。&lt;/p>
&lt;h3 id="三次元画像処理">三次元画像処理&lt;/h3>
&lt;p>次に、RGB画像とデプス画像を統合し、検出した物体までの距離を測定してみましょう。&lt;/p>
&lt;p>&lt;code>/camera/color/image_raw&lt;/code> (RGB画像)
&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code> (整列されたDepth画像)&lt;/p>
&lt;p>はピクセル同士が対応するように処理されてはいるものの、
パブリッシュされた時刻は独立しているため、
併せて使用するには時刻の同期を行う必要があります。&lt;/p>
&lt;p>画像の時刻同期には&lt;a href="http://wiki.ros.org/message_filters" target="_blank" rel="noopener">message_filters&lt;/a>がよく使われます。&lt;/p>
&lt;p>message_filters.ApproximateTimeSynchronizerを使い、以下のようにSubscriberを作成します。&lt;/p>
&lt;pre>&lt;code class="language-python">#!/usr/bin/env python3
import copy
from typing import List
import cv2
import message_filters
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
class DetectionDistance:
def __init__(self):
rospy.init_node('detection_distance', anonymous=True)
# Publisher
self.detection_result_pub = rospy.Publisher('/detection_result', Image, queue_size=10)
# Subscriber
rgb_sub = message_filters.Subscriber('/camera/color/image_raw', Image)
depth_sub = message_filters.Subscriber('/camera/aligned_depth_to_color/image_raw', Image)
message_filters.ApproximateTimeSynchronizer([rgb_sub, depth_sub], 10, 1.0).registerCallback(self.callback_rgbd)
self.bridge = CvBridge()
self.rgb_image, self.depth_image = None, None
def callback_rgbd(self, data1, data2):
cv_array = self.bridge.imgmsg_to_cv2(data1, 'bgr8')
cv_array = cv2.cvtColor(cv_array, cv2.COLOR_BGR2RGB)
self.rgb_image = cv_array
cv_array = self.bridge.imgmsg_to_cv2(data2, 'passthrough')
self.depth_image = cv_array
# 後略
&lt;/code>&lt;/pre>
&lt;p>この例では、&lt;br>
&lt;code>/camera/color/image_raw&lt;/code>と&lt;br>
&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>の&lt;br>
トピックを同時(1.0秒までのずれを許容する)に受け取った場合のみ、
2つの画像データをコールバック関数callback_rgbdに渡します。&lt;/p>
&lt;p>それでは、&lt;a href="https://github.com/matsuolab/roomba_hack/tree/master/catkin_ws/src/three-dimensions_tutorial" target="_blank" rel="noopener">three-dementions_tutorial&lt;/a>
パッケージの&lt;a href="https://github.com/matsuolab/roomba_hack/blob/master/catkin_ws/src/three-dimensions_tutorial/scripts/detection_distance.py" target="_blank" rel="noopener">detection_distance.py&lt;/a>
を見てみましょう。&lt;br>
物体を検出し、その物体までの距離を測定するスクリプトです。&lt;/p>
&lt;pre>&lt;code class="language-py">#!/usr/bin/env python3
import copy
from typing import List
import cv2
import message_filters
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from ultralytics import YOLO
from ultralytics.engine.results import Results
class DetectionDistance:
def __init__(self):
rospy.init_node('detection_distance', anonymous=True)
# Publisher
self.detection_result_pub = rospy.Publisher('/detection_result', Image, queue_size=10)
# Subscriber
rgb_sub = message_filters.Subscriber('/camera/color/image_raw', Image)
depth_sub = message_filters.Subscriber('/camera/aligned_depth_to_color/image_raw', Image)
message_filters.ApproximateTimeSynchronizer([rgb_sub, depth_sub], 10, 1.0).registerCallback(self.callback_rgbd)
self.bridge = CvBridge()
self.rgb_image, self.depth_image = None, None
self.model = YOLO('yolov8n.pt')
def callback_rgbd(self, data1, data2):
cv_array = self.bridge.imgmsg_to_cv2(data1, 'bgr8')
cv_array = cv2.cvtColor(cv_array, cv2.COLOR_BGR2RGB)
self.rgb_image = cv_array
cv_array = self.bridge.imgmsg_to_cv2(data2, 'passthrough')
self.depth_image = cv_array
def process(self):
while not rospy.is_shutdown():
if self.rgb_image is None:
continue
# inference
tmp_image = copy.copy(self.rgb_image)
results: List[Results] = self.model.predict(self.rgb_image, verbose=False)
# plot bouding box
for result in results:
boxes = result.boxes.cpu().numpy()
names = result.names
if len(boxes.xyxy) == 0:
continue
x1, y1, x2, y2 = map(int, boxes.xyxy[0][:4])
cls_pred = boxes.cls[0]
tmp_image = cv2.rectangle(tmp_image, (x1, y1), (x2, y2), (0, 255, 0), 3)
tmp_image = cv2.putText(tmp_image, names[cls_pred], (x1, y1), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0), 2)
cx, cy = (x1+x2)//2, (y1+y2)//2
print(names[cls_pred], self.depth_image[cy][cx]/1000, &amp;quot;m&amp;quot;)
# publish image
tmp_image = cv2.cvtColor(tmp_image, cv2.COLOR_RGB2BGR)
detection_result = self.bridge.cv2_to_imgmsg(tmp_image, &amp;quot;bgr8&amp;quot;)
self.detection_result_pub.publish(detection_result)
if __name__ == '__main__':
dd = DetectionDistance()
try:
dd.process()
except rospy.ROSInitException:
pass
&lt;/code>&lt;/pre>
&lt;p>基本的には物体検出のスクリプトと同じですが、&lt;/p>
&lt;pre>&lt;code class="language-py">cx, cy = (x1+x2)//2, (y1+y2)//2
print(names[cls_pred], self.depth_image[cy][cx]/1000, &amp;quot;m&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>でbounding boxの中心座標を変換し、対応する距離をメートル単位で表示しています。&lt;/p>
&lt;p>整列されたデプス画像を用いているため、RGB画像に基づき算出した座標をそのまま指定できます。&lt;/p>
&lt;h3 id="点群の作成">点群の作成&lt;/h3>
&lt;p>上の例ではRGB画像とDepth画像を用いて、物体位置の代表となる点とロボット位置の関係を扱うことができました。&lt;/p>
&lt;p>しかし、代表となる点以外の深度データも三次元空間に直接マッピングできると、
物体の大きさや形状といった情報も扱うことができ、
環境情報をより直感的・統一的に扱うことができるように思われます。&lt;/p>
&lt;p>そこでDepth画像から点群と呼ばれるデータを作成することを考えます。&lt;/p>
&lt;p>点群とは三次元座標値 (X, Y, Z) で構成された点の集まりのことです。各点の情報として、三次元座標値に加え色の情報 (R, G, B) が加わることもあります。
デプス画像はカメラの内部パラメータを用いることによって点群データに変換することができます。(&lt;a href="https://medium.com/yodayoda/from-depth-map-to-point-cloud-7473721d3f" target="_blank" rel="noopener">参考&lt;/a>)&lt;/p>
&lt;p>今回は、デプス画像を点群データに変換するためのROSの外部パッケージである
&lt;a href="http://wiki.ros.org/depth_image_proc" target="_blank" rel="noopener">depth_image_proc&lt;/a>
を使用して点群を作成します。&lt;/p>
&lt;p>外部パッケージは&lt;code>~/catkin_ws/src&lt;/code>等のワークスペースに配置し、ビルドしパスを通すことで簡単に使用できます。&lt;/p>
&lt;p>depth_image_procのwikiを参考に以下のようなlaunchファイルを作成しました。&lt;/p>
&lt;pre>&lt;code class="language-xml">&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;launch&amp;gt;
&amp;lt;node pkg=&amp;quot;nodelet&amp;quot; type=&amp;quot;nodelet&amp;quot; name=&amp;quot;nodelet_manager&amp;quot; args=&amp;quot;manager&amp;quot; /&amp;gt;
&amp;lt;node pkg=&amp;quot;nodelet&amp;quot; type=&amp;quot;nodelet&amp;quot; name=&amp;quot;nodelet1&amp;quot;
args=&amp;quot;load depth_image_proc/point_cloud_xyz nodelet_manager&amp;quot;&amp;gt;
&amp;lt;remap from=&amp;quot;camera_info&amp;quot; to=&amp;quot;/camera/color/camera_info&amp;quot;/&amp;gt;
&amp;lt;remap from=&amp;quot;image_rect&amp;quot; to=&amp;quot;/camera/aligned_depth_to_color/image_raw&amp;quot;/&amp;gt;
&amp;lt;remap from=&amp;quot;points&amp;quot; to=&amp;quot;/camera/depth/points&amp;quot;/&amp;gt;
&amp;lt;/node&amp;gt;
&amp;lt;/launch&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>このlaunchファイルを実行すると&lt;br>
&lt;code>/camera/color/camera_info&lt;/code>と&lt;br>
&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>を&lt;br>
subscribeし、&lt;br>
&lt;code>/camera/depth/points&lt;/code>をpublishするノードが作成されます。&lt;/p>
&lt;p>&lt;code>/camera/color/camera_info&lt;/code>は
&lt;a href="http://docs.ros.org/en/melodic/api/sensor_msgs/html/msg/CameraInfo.html" target="_blank" rel="noopener">sensor_msgs/CameraInfo&lt;/a>型のトピックです。
カメラパラメータやフレームid、タイムスタンプなどの情報を保持しており、点群の変換に利用されます。&lt;/p>
&lt;p>&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>はRGB画像に合わせて整列されたDepth画像であるため、
&lt;code>/camera/&lt;mark>depth&lt;/mark>/camera_info&lt;/code>ではなく&lt;br>
&lt;code>/camera/&lt;mark>color&lt;/mark>/camera_info&lt;/code>を指定しています。&lt;/p>
&lt;pre>&lt;code class="language-bash">(開発PC)(docker)# roslaunch three-dimensions_tutorial depth2pc.launch
&lt;/code>&lt;/pre>
&lt;p>を実行し、&lt;code>/camera/depth/points&lt;/code>トピックをrvizで可視化をすると三次元空間に点群データが表示されているのが確認できます。&lt;/p>
&lt;h2 id="演習">演習&lt;/h2>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>(開発PC, jetson)起動準備&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-bash">(jetson)$ ./RUN-DOCKER-CONTAINER.sh
(jetson)(docker)# roslaunch roomba_bringup bringup.launch
(開発PC)$ ./RUN-DOCKER-CONTAINER.sh 192.168.10.7x
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>(開発PC)RealSenseのトピックの可視化&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-bash">(開発PC)(docker)# rviz
&lt;/code>&lt;/pre>
&lt;p>rviz上で&lt;/p>
&lt;ul>
&lt;li>&lt;code>/camera/color/image_raw&lt;/code>&lt;/li>
&lt;li>&lt;code>/camera/depth/image_raw&lt;/code>&lt;/li>
&lt;li>&lt;code>/camera/aligned_depth_to_color/image_raw&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>を可視化して違いを確認してみましょう。&lt;/p>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-4">
&lt;summary>(開発PC)物体検出を行う&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-bash">(開発PC)(docker)# cd catkin_ws; catkin_make; source devel/setup.bash
(開発PC)(docker)# rosrun three-dimensions_tutorial object_detection.py
# rvizで`/detection_result`を表示し結果を確認してみよう。
(開発PC)(docker)# rosrun three-dimensions_tutorial detection_distance.py
&lt;/code>&lt;/pre>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-5">
&lt;summary>(開発PC)外部パッケージを使用&lt;/summary>
&lt;p>&lt;pre>&lt;code class="language-bash">(開発PC)(docker)# cd ~/external_catkin_ws/src
(開発PC)(docker)# git clone https://github.com/ros-perception/image_pipeline
(開発PC)(docker)# cd ../; catkin build; source devel/setup.bash
(開発PC)(docker)# cd ~/roomba_hack/catkin_ws; source devel/setup.bash
(開発PC)(docker)# roslaunch three-dimensions_tutorial depth2pc.launch
(開発PC)(docker)# roslaunch navigation_tutorial navigation.launch
&lt;/code>&lt;/pre>
&lt;p>rvizで&lt;code>/camera/depth/points&lt;/code>トピックを追加して確認してみましょう。&lt;/p>
&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-6">
&lt;summary>余裕がある人向け&lt;/summary>
&lt;p>&lt;p>物体を検出し、特定の物体の手前まで移動するスクリプトを作ってみましょう。&lt;/p>
&lt;p>ヒント&lt;/p>
&lt;ul>
&lt;li>物体検出結果に基づいて物体部分以外をマスクしたデプス画像をpublishする&lt;/li>
&lt;li>depth2pc.launchでそれをsubscribeし、point(cloud)に変換する&lt;/li>
&lt;li>変換されたpointからmap座標系での位置を取得する&lt;/li>
&lt;li>navigation_tutorial/scripts/set_goal.py (map座標系で指定した位置・姿勢までナビゲーションするスクリプト)などを参考に、その位置へとナビゲーションする&lt;/li>
&lt;/ul>
&lt;p>PyTorchを使用した自作の分類器やネット上の分類器をシステムに組み込んでみましょう。&lt;/p>
&lt;p>Lidarに映らない物体も画像ベースで検出しコストマップに追加することでナビゲーション時にぶつからないようにしましょう。&lt;/p>
&lt;/p>
&lt;/details></description></item></channel></rss>